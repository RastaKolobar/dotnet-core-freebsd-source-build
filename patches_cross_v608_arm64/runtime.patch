diff --git a/eng/Versions.props b/eng/Versions.props
index 3fb7f95e5db..685b104dc2a 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -59,12 +59,12 @@
     <!-- NuGet dependencies -->
     <NuGetBuildTasksPackVersion>6.0.0-preview.1.102</NuGetBuildTasksPackVersion>
     <!-- Installer dependencies -->
-    <MicrosoftNETCoreAppRuntimewinx64Version>6.0.0-alpha.1.20612.4</MicrosoftNETCoreAppRuntimewinx64Version>
-    <MicrosoftNETCoreDotNetHostVersion>6.0.0-rc.1.21415.6</MicrosoftNETCoreDotNetHostVersion>
-    <MicrosoftNETCoreDotNetHostPolicyVersion>6.0.0-rc.1.21415.6</MicrosoftNETCoreDotNetHostPolicyVersion>
+    <MicrosoftNETCoreAppRuntimewinx64Version>6.0.0-rc.1.21451.13</MicrosoftNETCoreAppRuntimewinx64Version>
+    <MicrosoftNETCoreDotNetHostVersion>6.0.0-rc.1.21451.13</MicrosoftNETCoreDotNetHostVersion>
+    <MicrosoftNETCoreDotNetHostPolicyVersion>6.0.0-rc.1.21451.13</MicrosoftNETCoreDotNetHostPolicyVersion>
     <MicrosoftExtensionsDependencyModelVersion>3.1.0</MicrosoftExtensionsDependencyModelVersion>
     <!-- CoreClr dependencies -->
-    <MicrosoftNETCoreILAsmVersion>6.0.0-rc.1.21415.6</MicrosoftNETCoreILAsmVersion>
+    <MicrosoftNETCoreILAsmVersion>6.0.0-rc.1.21451.13</MicrosoftNETCoreILAsmVersion>
     <!-- Libraries dependencies -->
     <MicrosoftBclAsyncInterfacesVersion>5.0.0</MicrosoftBclAsyncInterfacesVersion>
     <MicrosoftWin32PrimitivesVersion>4.3.0</MicrosoftWin32PrimitivesVersion>
diff --git a/eng/common/cross/toolchain.cmake b/eng/common/cross/toolchain.cmake
index ec8971eb019..154e2905887 100644
--- a/eng/common/cross/toolchain.cmake
+++ b/eng/common/cross/toolchain.cmake
@@ -31,7 +31,7 @@ elseif(TARGET_ARCH_NAME STREQUAL "arm64")
   if(EXISTS ${CROSS_ROOTFS}/usr/lib/gcc/aarch64-alpine-linux-musl)
     set(TOOLCHAIN "aarch64-alpine-linux-musl")
   else()
-    set(TOOLCHAIN "aarch64-linux-gnu")
+    set(TOOLCHAIN "aarch64-unknown-freebsd13")
   endif()
   if("$ENV{__DistroRid}" MATCHES "tizen.*")
     set(TIZEN_TOOLCHAIN "aarch64-tizen-linux-gnu/9.2.0")
@@ -44,7 +44,7 @@ elseif(TARGET_ARCH_NAME STREQUAL "x86")
   set(TOOLCHAIN "i686-linux-gnu")
 elseif (CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
   set(CMAKE_SYSTEM_PROCESSOR "x86_64")
-  set(triple "x86_64-unknown-freebsd11")
+  set(triple "x86_64-unknown-freebsd12")
 elseif (ILLUMOS)
   set(CMAKE_SYSTEM_PROCESSOR "x86_64")
   set(TOOLCHAIN "x86_64-illumos")
@@ -90,6 +90,9 @@ elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
     set(CMAKE_C_COMPILER_TARGET ${triple})
     set(CMAKE_CXX_COMPILER_TARGET ${triple})
     set(CMAKE_ASM_COMPILER_TARGET ${triple})
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fuse-ld=lld")
+    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fuse-ld=lld")
+    set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -fuse-ld=lld")
     set(CMAKE_SYSROOT "${CROSS_ROOTFS}")
 elseif(ILLUMOS)
     set(CMAKE_SYSROOT "${CROSS_ROOTFS}")
@@ -174,7 +177,7 @@ endif()
 
 # Specify compile options
 
-if((TARGET_ARCH_NAME MATCHES "^(arm|armel|arm64|s390x)$" AND NOT "$ENV{__DistroRid}" MATCHES "android.*") OR ILLUMOS)
+if((TARGET_ARCH_NAME MATCHES "^(arm|armel|arm64|s390x)$" AND NOT "$ENV{__DistroRid}" MATCHES "android.*" AND NOT FREEBSD) OR ILLUMOS)
   set(CMAKE_C_COMPILER_TARGET ${TOOLCHAIN})
   set(CMAKE_CXX_COMPILER_TARGET ${TOOLCHAIN})
   set(CMAKE_ASM_COMPILER_TARGET ${TOOLCHAIN})
diff --git a/eng/common/native/find-native-compiler.sh b/eng/common/native/find-native-compiler.sh
index aed19d07d50..861d1931e55 100644
--- a/eng/common/native/find-native-compiler.sh
+++ b/eng/common/native/find-native-compiler.sh
@@ -55,7 +55,7 @@ if [ -z "$CLR_CC" ]; then
     # Set default versions
     if [ -z "$majorVersion" ]; then
         # note: gcc (all versions) and clang versions higher than 6 do not have minor version in file name, if it is zero.
-        if [ "$compiler" = "clang" ]; then versions=( 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5 )
+        if [ "$compiler" = "clang" ]; then versions=( 12 11 10 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5 )
         elif [ "$compiler" = "gcc" ]; then versions=( 9 8 7 6 5 4.9 ); fi
 
         for version in "${versions[@]}"; do
diff --git a/eng/native/configureplatform.cmake b/eng/native/configureplatform.cmake
index af1c88bce5b..7e5d9e19874 100644
--- a/eng/native/configureplatform.cmake
+++ b/eng/native/configureplatform.cmake
@@ -143,7 +143,7 @@ endif(CLR_CMAKE_HOST_OS STREQUAL Android)
 
 if(CLR_CMAKE_HOST_OS STREQUAL FreeBSD)
     set(CLR_CMAKE_HOST_UNIX 1)
-    set(CLR_CMAKE_HOST_UNIX_AMD64 1)
+    set(CLR_CMAKE_HOST_UNIX_ARM64 1)
     set(CLR_CMAKE_HOST_FREEBSD 1)
 endif(CLR_CMAKE_HOST_OS STREQUAL FreeBSD)
 
diff --git a/eng/native/configuretools.cmake b/eng/native/configuretools.cmake
index 136cd67925d..d9999fe2e51 100644
--- a/eng/native/configuretools.cmake
+++ b/eng/native/configuretools.cmake
@@ -49,6 +49,9 @@ if(NOT WIN32 AND NOT CLR_CMAKE_TARGET_BROWSER)
 
   if(NOT CLR_CMAKE_TARGET_OSX AND NOT CLR_CMAKE_TARGET_MACCATALYST AND NOT CLR_CMAKE_TARGET_IOS AND NOT CLR_CMAKE_TARGET_TVOS AND (NOT CLR_CMAKE_TARGET_ANDROID OR CROSS_ROOTFS))
     locate_toolchain_exec(objdump CMAKE_OBJDUMP)
+    
+    set(TOOLSET_PREFIX "llvm-")
+    locate_toolchain_exec(objcopy CMAKE_OBJCOPY)
 
     if(CLR_CMAKE_TARGET_ANDROID)
       set(TOOLSET_PREFIX ${ANDROID_TOOLCHAIN_PREFIX})
@@ -58,8 +61,6 @@ if(NOT WIN32 AND NOT CLR_CMAKE_TARGET_BROWSER)
     else()
       set(TOOLSET_PREFIX "")
     endif()
-
-    locate_toolchain_exec(objcopy CMAKE_OBJCOPY)
   endif()
 endif()
 
diff --git a/eng/native/init-compiler.sh b/eng/native/init-compiler.sh
index 567d18da474..c6a94f6f939 100755
--- a/eng/native/init-compiler.sh
+++ b/eng/native/init-compiler.sh
@@ -46,7 +46,7 @@ if [[ -z "$CLR_CC" ]]; then
     # Set default versions
     if [[ -z "$majorVersion" ]]; then
         # note: gcc (all versions) and clang versions higher than 6 do not have minor version in file name, if it is zero.
-        if [[ "$compiler" == "clang" ]]; then versions=( 11 10 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5 )
+        if [[ "$compiler" == "clang" ]]; then versions=( 12 11 10 9 8 7 6.0 5.0 4.0 3.9 3.8 3.7 3.6 3.5 )
         elif [[ "$compiler" == "gcc" ]]; then versions=( 11 10 9 8 7 6 5 4.9 ); fi
 
         for version in "${versions[@]}"; do
diff --git a/eng/pipelines/common/platform-matrix.yml b/eng/pipelines/common/platform-matrix.yml
index fbc12a81b5a..b91d7b50bb1 100644
--- a/eng/pipelines/common/platform-matrix.yml
+++ b/eng/pipelines/common/platform-matrix.yml
@@ -288,7 +288,7 @@ jobs:
       targetRid: freebsd-x64
       platform: FreeBSD_x64
       container:
-        image: ubuntu-18.04-cross-freebsd-11-20200407092345-a84b0d2
+        image: ubuntu-18.04-cross-freebsd-12-20210813173449-f13d79e
         registry: mcr
       jobParameters:
         runtimeFlavor: ${{ parameters.runtimeFlavor }}
diff --git a/src/coreclr/crossgen-corelib.proj b/src/coreclr/crossgen-corelib.proj
index 847066a891c..b44348581bb 100644
--- a/src/coreclr/crossgen-corelib.proj
+++ b/src/coreclr/crossgen-corelib.proj
@@ -97,6 +97,7 @@
       <CrossGenDllCmd>$(CrossGenDllCmd) -o:$(CoreLibOutputPath)</CrossGenDllCmd>
       <CrossGenDllCmd>$(CrossGenDllCmd) -r:$([MSBuild]::NormalizePath('$(BinDir)', 'IL', '*.dll'))</CrossGenDllCmd>
       <CrossGenDllCmd>$(CrossGenDllCmd) --targetarch:$(TargetArchitecture)</CrossGenDllCmd>
+      <CrossGenDllCmd>$(CrossGenDllCmd) --targetos:$(TargetOS)</CrossGenDllCmd>
       <CrossGenDllCmd>$(CrossGenDllCmd) --perfmap-format-version:1</CrossGenDllCmd>
       <MibcArgs>@(OptimizationMibcFiles->'-m:$(MergedMibcPath)', ' ')</MibcArgs>
       <CrossGenDllCmd Condition="'$(UsingToolIbcOptimization)' != 'true' and '$(EnableNgenOptimization)' == 'true'">$(CrossGenDllCmd) $(MibcArgs) --embed-pgo-data</CrossGenDllCmd>
diff --git a/src/coreclr/inc/crosscomp.h b/src/coreclr/inc/crosscomp.h
index 358b5d2b668..9a1fdff0178 100644
--- a/src/coreclr/inc/crosscomp.h
+++ b/src/coreclr/inc/crosscomp.h
@@ -416,6 +416,8 @@ enum
 #define DAC_CS_NATIVE_DATA_SIZE 12
 #elif defined(TARGET_FREEBSD) && defined(TARGET_AMD64)
 #define DAC_CS_NATIVE_DATA_SIZE 24
+#elif defined(TARGET_FREEBSD) && defined(TARGET_ARM64)
+#define DAC_CS_NATIVE_DATA_SIZE 24
 #elif defined(TARGET_LINUX) && defined(TARGET_ARM)
 #define DAC_CS_NATIVE_DATA_SIZE 80
 #elif defined(TARGET_LINUX) && defined(TARGET_ARM64)
diff --git a/src/coreclr/pal/inc/pal.h b/src/coreclr/pal/inc/pal.h
index e59e406d14f..74b2bff787f 100644
--- a/src/coreclr/pal/inc/pal.h
+++ b/src/coreclr/pal/inc/pal.h
@@ -2435,6 +2435,8 @@ PALIMPORT BOOL PALAPI PAL_VirtualUnwindOutOfProc(CONTEXT *context, KNONVOLATILE_
 #define PAL_CS_NATIVE_DATA_SIZE 12
 #elif defined(__FreeBSD__) && defined(__x86_64__)
 #define PAL_CS_NATIVE_DATA_SIZE 24
+#elif defined(__FreeBSD__) && defined(HOST_ARM64)
+#define PAL_CS_NATIVE_DATA_SIZE 24
 #elif defined(__linux__) && defined(HOST_ARM)
 #define PAL_CS_NATIVE_DATA_SIZE 80
 #elif defined(__linux__) && defined(HOST_ARM64)
diff --git a/src/coreclr/pal/src/configure.cmake b/src/coreclr/pal/src/configure.cmake
index ee4a3241196..7be7ba0d333 100644
--- a/src/coreclr/pal/src/configure.cmake
+++ b/src/coreclr/pal/src/configure.cmake
@@ -1340,7 +1340,13 @@ elseif(CLR_CMAKE_TARGET_FREEBSD)
   set(PAL_PT_READ_D PT_READ_D)
   set(PAL_PT_WRITE_D PT_WRITE_D)
   set(HAS_FTRUNCATE_LENGTH_ISSUE 0)
-  set(BSD_REGS_STYLE "((reg).r_##rr)")
+  if (CLR_CMAKE_HOST_ARCH_AMD64)
+    set(BSD_REGS_STYLE "((reg).r_##rr)")
+  elseif(CLR_CMAKE_HOST_ARCH_ARM64)
+    set(BSD_REGS_STYLE "((reg).rr)")
+  else()
+    message(FATAL_ERROR "Unknown FreeBSD architecture")
+  endif()
   set(HAVE_SCHED_OTHER_ASSIGNABLE 1)
 elseif(CLR_CMAKE_TARGET_NETBSD)
   set(DEADLOCK_WHEN_THREAD_IS_SUSPENDED_WHILE_BLOCKED_ON_MUTEX 0)
diff --git a/src/coreclr/pal/src/eventprovider/CMakeLists.txt b/src/coreclr/pal/src/eventprovider/CMakeLists.txt
index aaf420458a6..143206b5c34 100644
--- a/src/coreclr/pal/src/eventprovider/CMakeLists.txt
+++ b/src/coreclr/pal/src/eventprovider/CMakeLists.txt
@@ -1,6 +1,6 @@
 set(EVENT_MANIFEST ${VM_DIR}/ClrEtwAll.man)
 
-if(CLR_CMAKE_HOST_LINUX OR CLR_CMAKE_HOST_FREEBSD)
+if(CLR_CMAKE_HOST_LINUX)
   add_subdirectory(lttngprovider)
 else()
   add_subdirectory(dummyprovider)
diff --git a/src/coreclr/pal/src/exception/seh-unwind.cpp b/src/coreclr/pal/src/exception/seh-unwind.cpp
index a9ddb179d5f..4f6ef09026e 100644
--- a/src/coreclr/pal/src/exception/seh-unwind.cpp
+++ b/src/coreclr/pal/src/exception/seh-unwind.cpp
@@ -115,46 +115,6 @@ enum
     ASSIGN_REG(R13)        \
     ASSIGN_REG(R14)        \
     ASSIGN_REG(R15)
-#elif (defined(HOST_UNIX) && defined(HOST_ARM64)) || (defined(HOST_WINDOWS) && defined(TARGET_ARM64))
-#define ASSIGN_UNWIND_REGS \
-    ASSIGN_REG(Pc)         \
-    ASSIGN_REG(Sp)         \
-    ASSIGN_REG(Fp)         \
-    ASSIGN_REG(Lr)         \
-    ASSIGN_REG(X19)        \
-    ASSIGN_REG(X20)        \
-    ASSIGN_REG(X21)        \
-    ASSIGN_REG(X22)        \
-    ASSIGN_REG(X23)        \
-    ASSIGN_REG(X24)        \
-    ASSIGN_REG(X25)        \
-    ASSIGN_REG(X26)        \
-    ASSIGN_REG(X27)        \
-    ASSIGN_REG(X28)        \
-    ASSIGN_FP_REG(8)       \
-    ASSIGN_FP_REG(9)       \
-    ASSIGN_FP_REG(10)       \
-    ASSIGN_FP_REG(11)       \
-    ASSIGN_FP_REG(12)       \
-    ASSIGN_FP_REG(13)       \
-    ASSIGN_FP_REG(14)       \
-    ASSIGN_FP_REG(15)       \
-    ASSIGN_FP_REG(16)       \
-    ASSIGN_FP_REG(17)       \
-    ASSIGN_FP_REG(18)       \
-    ASSIGN_FP_REG(19)       \
-    ASSIGN_FP_REG(20)       \
-    ASSIGN_FP_REG(21)       \
-    ASSIGN_FP_REG(22)       \
-    ASSIGN_FP_REG(23)       \
-    ASSIGN_FP_REG(24)       \
-    ASSIGN_FP_REG(25)       \
-    ASSIGN_FP_REG(26)       \
-    ASSIGN_FP_REG(27)       \
-    ASSIGN_FP_REG(28)       \
-    ASSIGN_FP_REG(29)       \
-    ASSIGN_FP_REG(30)       \
-    ASSIGN_FP_REG(31)
 #elif (defined(HOST_UNIX) && defined(HOST_X86)) || (defined(HOST_WINDOWS) && defined(TARGET_X86))
 #define ASSIGN_UNWIND_REGS \
     ASSIGN_REG(Eip)        \
@@ -176,22 +136,90 @@ enum
     ASSIGN_REG(R13)        \
     ASSIGN_REG(R14)        \
     ASSIGN_REG(R15)
+#elif (defined(HOST_UNIX) && defined(HOST_LOONGARCH64))
+#define ASSIGN_UNWIND_REGS \
+    ASSIGN_REG(Pc)         \
+    ASSIGN_REG(Tp)         \
+    ASSIGN_REG(Sp)         \
+    ASSIGN_REG(Fp)         \
+    ASSIGN_REG(Ra)         \
+    ASSIGN_REG(S0)         \
+    ASSIGN_REG(S1)         \
+    ASSIGN_REG(S2)         \
+    ASSIGN_REG(S3)         \
+    ASSIGN_REG(S4)         \
+    ASSIGN_REG(S5)         \
+    ASSIGN_REG(S6)         \
+    ASSIGN_REG(S7)         \
+    ASSIGN_REG(S8)
+#elif (defined(HOST_UNIX) && defined(HOST_POWERPC64))
+#define ASSIGN_UNWIND_REGS \
+    ASSIGN_REG(Nip)        \
+    ASSIGN_REG(R14)        \
+    ASSIGN_REG(R15)        \
+    ASSIGN_REG(R16)        \
+    ASSIGN_REG(R17)        \
+    ASSIGN_REG(R18)        \
+    ASSIGN_REG(R19)        \
+    ASSIGN_REG(R20)        \
+    ASSIGN_REG(R21)        \
+    ASSIGN_REG(R22)        \
+    ASSIGN_REG(R23)        \
+    ASSIGN_REG(R24)        \
+    ASSIGN_REG(R25)        \
+    ASSIGN_REG(R26)        \
+    ASSIGN_REG(R27)        \
+    ASSIGN_REG(R28)        \
+    ASSIGN_REG(R29)        \
+    ASSIGN_REG(R30)        \
+    ASSIGN_REG(R31)        
+#elif (defined(HOST_ARM64) && defined(TARGET_FREEBSD))
+#define ASSIGN_UNWIND_REGS \
+    ASSIGN_REG(X0) \
+    ASSIGN_REG(X1) \
+    ASSIGN_REG(X2) \
+    ASSIGN_REG(X3) \
+    ASSIGN_REG(X4) \
+    ASSIGN_REG(X5) \
+    ASSIGN_REG(X6) \
+    ASSIGN_REG(X7) \
+    ASSIGN_REG(X8) \
+    ASSIGN_REG(X9) \
+    ASSIGN_REG(X10) \
+    ASSIGN_REG(X11) \
+    ASSIGN_REG(X12) \
+    ASSIGN_REG(X13) \
+    ASSIGN_REG(X14) \
+    ASSIGN_REG(X15) \
+    ASSIGN_REG(X16) \
+    ASSIGN_REG(X17) \
+    ASSIGN_REG(X18) \
+    ASSIGN_REG(X19) \
+    ASSIGN_REG(X20) \
+    ASSIGN_REG(X21) \
+    ASSIGN_REG(X22) \
+    ASSIGN_REG(X23) \
+    ASSIGN_REG(X24) \
+    ASSIGN_REG(X25) \
+    ASSIGN_REG(X26) \
+    ASSIGN_REG(X27) \
+    ASSIGN_REG(X28) \
+    ASSIGN_REG(Lr) \
+    ASSIGN_REG(Sp) \
+    ASSIGN_REG(Pc) \
+    ASSIGN_REG(Fp) \
+    ASSIGN_REG(Cpsr)
 #else
 #error unsupported architecture
 #endif
 
 static void WinContextToUnwindContext(CONTEXT *winContext, unw_context_t *unwContext)
 {
-#if (defined(HOST_UNIX) && defined(HOST_ARM64)) || (defined(HOST_WINDOWS) && defined(TARGET_ARM64))
-    fpsimd_context* fp = GetNativeSigSimdContext(unwContext);
-#define ASSIGN_FP_REG(fp, reg) if (fp) *(NEON128*) &fp->vregs[reg] = winContext->V[reg];
-#endif
 #define ASSIGN_REG(reg) MCREG_##reg(unwContext->uc_mcontext) = winContext->reg;
     ASSIGN_UNWIND_REGS
 #undef ASSIGN_REG
-#undef ASSIGN_FP_REG
 }
-#else
+#else // UNWIND_CONTEXT_IS_UCONTEXT_T
 static void WinContextToUnwindContext(CONTEXT *winContext, unw_context_t *unwContext)
 {
 #if (defined(HOST_UNIX) && defined(HOST_ARM)) || (defined(HOST_WINDOWS) && defined(TARGET_ARM))
@@ -216,6 +244,10 @@ static void WinContextToUnwindContext(CONTEXT *winContext, unw_context_t *unwCon
     unwContext->regs[13] = winContext->Sp;
     unwContext->regs[14] = winContext->Lr;
     unwContext->regs[15] = winContext->Pc;
+    for (int i = 0; i < 16; i++)
+    {
+        unwContext->fpregs[i] = winContext->D[i];
+    }
 #elif defined(HOST_ARM64) && !defined(TARGET_OSX)
     unwContext->uc_mcontext.pc       = winContext->Pc;
     unwContext->uc_mcontext.sp       = winContext->Sp;
@@ -302,7 +334,7 @@ static void WinContextToUnwindCursor(CONTEXT *winContext, unw_cursor_t *cursor)
     unw_set_fpreg(cursor, UNW_AARCH64_V31, *(unw_fpreg_t *)&winContext->V[31].Low);
 #endif
 }
-#endif
+#endif // UNWIND_CONTEXT_IS_UCONTEXT_T
 
 void UnwindContextToWinContext(unw_cursor_t *cursor, CONTEXT *winContext)
 {
@@ -334,6 +366,14 @@ void UnwindContextToWinContext(unw_cursor_t *cursor, CONTEXT *winContext)
     unw_get_reg(cursor, UNW_ARM_R9, (unw_word_t *) &winContext->R9);
     unw_get_reg(cursor, UNW_ARM_R10, (unw_word_t *) &winContext->R10);
     unw_get_reg(cursor, UNW_ARM_R11, (unw_word_t *) &winContext->R11);
+    unw_get_fpreg(cursor, UNW_ARM_D8, (unw_fpreg_t *)&winContext->D[8]);
+    unw_get_fpreg(cursor, UNW_ARM_D9, (unw_fpreg_t *)&winContext->D[9]);
+    unw_get_fpreg(cursor, UNW_ARM_D10, (unw_fpreg_t *)&winContext->D[10]);
+    unw_get_fpreg(cursor, UNW_ARM_D11, (unw_fpreg_t *)&winContext->D[11]);
+    unw_get_fpreg(cursor, UNW_ARM_D12, (unw_fpreg_t *)&winContext->D[12]);
+    unw_get_fpreg(cursor, UNW_ARM_D13, (unw_fpreg_t *)&winContext->D[13]);
+    unw_get_fpreg(cursor, UNW_ARM_D14, (unw_fpreg_t *)&winContext->D[14]);
+    unw_get_fpreg(cursor, UNW_ARM_D15, (unw_fpreg_t *)&winContext->D[15]);
 #elif (defined(HOST_UNIX) && defined(HOST_ARM64)) || (defined(HOST_WINDOWS) && defined(TARGET_ARM64))
     unw_get_reg(cursor, UNW_REG_IP, (unw_word_t *) &winContext->Pc);
     unw_get_reg(cursor, UNW_REG_SP, (unw_word_t *) &winContext->Sp);
@@ -392,6 +432,41 @@ void UnwindContextToWinContext(unw_cursor_t *cursor, CONTEXT *winContext)
     unw_get_reg(cursor, UNW_S390X_R12, (unw_word_t *) &winContext->R12);
     unw_get_reg(cursor, UNW_S390X_R13, (unw_word_t *) &winContext->R13);
     unw_get_reg(cursor, UNW_S390X_R14, (unw_word_t *) &winContext->R14);
+#elif (defined(HOST_UNIX) && defined(HOST_LOONGARCH64))
+    unw_get_reg(cursor, UNW_REG_IP, (unw_word_t *) &winContext->Pc);
+    unw_get_reg(cursor, UNW_REG_SP, (unw_word_t *) &winContext->Sp);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R1, (unw_word_t *) &winContext->Ra);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R2, (unw_word_t *) &winContext->Tp);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R22, (unw_word_t *) &winContext->Fp);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R23, (unw_word_t *) &winContext->S0);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R24, (unw_word_t *) &winContext->S1);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R25, (unw_word_t *) &winContext->S2);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R26, (unw_word_t *) &winContext->S3);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R27, (unw_word_t *) &winContext->S4);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R28, (unw_word_t *) &winContext->S5);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R29, (unw_word_t *) &winContext->S6);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R30, (unw_word_t *) &winContext->S7);
+    unw_get_reg(cursor, UNW_LOONGARCH64_R31, (unw_word_t *) &winContext->S8);
+#elif (defined(HOST_UNIX) && defined(HOST_POWERPC64))
+    unw_get_reg(cursor, UNW_REG_SP, (unw_word_t *) &winContext->R31);
+    unw_get_reg(cursor, UNW_REG_IP, (unw_word_t *) &winContext->Nip);
+    unw_get_reg(cursor, UNW_PPC64_R14, (unw_word_t *) &winContext->R14);
+    unw_get_reg(cursor, UNW_PPC64_R15, (unw_word_t *) &winContext->R15);
+    unw_get_reg(cursor, UNW_PPC64_R16, (unw_word_t *) &winContext->R16);
+    unw_get_reg(cursor, UNW_PPC64_R17, (unw_word_t *) &winContext->R17);
+    unw_get_reg(cursor, UNW_PPC64_R18, (unw_word_t *) &winContext->R18);
+    unw_get_reg(cursor, UNW_PPC64_R19, (unw_word_t *) &winContext->R19);
+    unw_get_reg(cursor, UNW_PPC64_R20, (unw_word_t *) &winContext->R20);
+    unw_get_reg(cursor, UNW_PPC64_R21, (unw_word_t *) &winContext->R21);
+    unw_get_reg(cursor, UNW_PPC64_R22, (unw_word_t *) &winContext->R22);
+    unw_get_reg(cursor, UNW_PPC64_R23, (unw_word_t *) &winContext->R23);
+    unw_get_reg(cursor, UNW_PPC64_R24, (unw_word_t *) &winContext->R24);
+    unw_get_reg(cursor, UNW_PPC64_R25, (unw_word_t *) &winContext->R25);
+    unw_get_reg(cursor, UNW_PPC64_R26, (unw_word_t *) &winContext->R26);
+    unw_get_reg(cursor, UNW_PPC64_R27, (unw_word_t *) &winContext->R27);
+    unw_get_reg(cursor, UNW_PPC64_R28, (unw_word_t *) &winContext->R28);
+    unw_get_reg(cursor, UNW_PPC64_R29, (unw_word_t *) &winContext->R29);
+    unw_get_reg(cursor, UNW_PPC64_R30, (unw_word_t *) &winContext->R30);
 #else
 #error unsupported architecture
 #endif
@@ -438,6 +513,14 @@ void GetContextPointers(unw_cursor_t *cursor, unw_context_t *unwContext, KNONVOL
     GetContextPointer(cursor, unwContext, UNW_ARM_R9, &contextPointers->R9);
     GetContextPointer(cursor, unwContext, UNW_ARM_R10, &contextPointers->R10);
     GetContextPointer(cursor, unwContext, UNW_ARM_R11, &contextPointers->R11);
+    GetContextPointer(cursor, unwContext, UNW_ARM_D8, (SIZE_T **)&contextPointers->D8);
+    GetContextPointer(cursor, unwContext, UNW_ARM_D9, (SIZE_T **)&contextPointers->D9);
+    GetContextPointer(cursor, unwContext, UNW_ARM_D10, (SIZE_T **)&contextPointers->D10);
+    GetContextPointer(cursor, unwContext, UNW_ARM_D11, (SIZE_T **)&contextPointers->D11);
+    GetContextPointer(cursor, unwContext, UNW_ARM_D12, (SIZE_T **)&contextPointers->D12);
+    GetContextPointer(cursor, unwContext, UNW_ARM_D13, (SIZE_T **)&contextPointers->D13);
+    GetContextPointer(cursor, unwContext, UNW_ARM_D14, (SIZE_T **)&contextPointers->D14);
+    GetContextPointer(cursor, unwContext, UNW_ARM_D15, (SIZE_T **)&contextPointers->D15);
 #elif (defined(HOST_UNIX) && defined(HOST_ARM64)) || (defined(HOST_WINDOWS) && defined(TARGET_ARM64))
     GetContextPointer(cursor, unwContext, UNW_AARCH64_X19, &contextPointers->X19);
     GetContextPointer(cursor, unwContext, UNW_AARCH64_X20, &contextPointers->X20);
@@ -469,6 +552,38 @@ void GetContextPointers(unw_cursor_t *cursor, unw_context_t *unwContext, KNONVOL
     GetContextPointer(cursor, unwContext, UNW_S390X_R13, &contextPointers->R13);
     GetContextPointer(cursor, unwContext, UNW_S390X_R14, &contextPointers->R14);
     GetContextPointer(cursor, unwContext, UNW_S390X_R15, &contextPointers->R15);
+#elif (defined(HOST_UNIX) && defined(HOST_LOONGARCH64))
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R1, &contextPointers->Ra);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R2, &contextPointers->Tp);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R22, &contextPointers->Fp);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R23, &contextPointers->S0);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R24, &contextPointers->S1);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R25, &contextPointers->S2);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R26, &contextPointers->S3);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R27, &contextPointers->S4);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R28, &contextPointers->S5);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R29, &contextPointers->S6);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R30, &contextPointers->S7);
+    GetContextPointer(cursor, unwContext, UNW_LOONGARCH64_R31, &contextPointers->S8);
+#elif (defined(HOST_UNIX) && defined(HOST_POWERPC64))
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R14, &contextPointers->R14);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R15, &contextPointers->R15);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R16, &contextPointers->R16);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R17, &contextPointers->R17);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R18, &contextPointers->R18);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R19, &contextPointers->R19);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R20, &contextPointers->R20);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R21, &contextPointers->R21);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R22, &contextPointers->R22);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R23, &contextPointers->R23);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R24, &contextPointers->R24);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R25, &contextPointers->R25);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R26, &contextPointers->R26);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R27, &contextPointers->R27);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R28, &contextPointers->R28);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R29, &contextPointers->R29);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R30, &contextPointers->R30);
+    GetContextPointer(cursor, unwContext, UNW_PPC64_R31, &contextPointers->R31);
 #else
 #error unsupported architecture
 #endif
@@ -477,8 +592,11 @@ void GetContextPointers(unw_cursor_t *cursor, unw_context_t *unwContext, KNONVOL
 #ifndef HOST_WINDOWS
 
 // Frame pointer relative offset of a local containing a pointer to the windows style context of a location
-// where a hardware exception occured.
+// where a hardware exception occurred.
 int g_hardware_exception_context_locvar_offset = 0;
+// Frame pointer relative offset of a local containing a pointer to the windows style context of a location
+// where an activation signal interrupted the thread.
+int g_inject_activation_context_locvar_offset = 0;
 
 BOOL PAL_VirtualUnwind(CONTEXT *context, KNONVOLATILE_CONTEXT_POINTERS *contextPointers)
 {
@@ -500,6 +618,18 @@ BOOL PAL_VirtualUnwind(CONTEXT *context, KNONVOLATILE_CONTEXT_POINTERS *contextP
         return TRUE;
     }
 
+    // Check if the PC is the return address from the InvokeActivationHandler.
+    // If that's the case, extract its local variable containing a pointer to the windows style context of the activation
+    // injection location and return that. This skips the signal handler trampoline that the libunwind
+    // cannot cross on some systems.
+    if ((void*)curPc == g_InvokeActivationHandlerReturnAddress)
+    {
+        CONTEXT* activationContext = (CONTEXT*)(CONTEXTGetFP(context) + g_inject_activation_context_locvar_offset);
+        memcpy_s(context, sizeof(CONTEXT), activationContext, sizeof(CONTEXT));
+
+        return TRUE;
+    }
+
     if ((context->ContextFlags & CONTEXT_EXCEPTION_ACTIVE) != 0)
     {
         // The current frame is a source of hardware exception. Due to the fact that
@@ -679,7 +809,7 @@ Parameters:
 Note:
     The name of this function and the name of the ExceptionRecord
     parameter is used in the sos lldb plugin code to read the exception
-    record. See coreclr\ToolBox\SOS\lldbplugin\services.cpp.
+    record. See coreclr\tools\SOS\lldbplugin\services.cpp.
 
     This function must not be inlined or optimized so the below PAL_VirtualUnwind
     calls end up with RaiseException caller's context and so the above debugger
diff --git a/src/coreclr/pal/src/exception/seh.cpp b/src/coreclr/pal/src/exception/seh.cpp
index d37eb6fb5c8..4e320d363d1 100644
--- a/src/coreclr/pal/src/exception/seh.cpp
+++ b/src/coreclr/pal/src/exception/seh.cpp
@@ -61,6 +61,7 @@ PGET_GCMARKER_EXCEPTION_CODE g_getGcMarkerExceptionCode = NULL;
 // Return address of the SEHProcessException, which is used to enable walking over
 // the signal handler trampoline on some Unixes where the libunwind cannot do that.
 void* g_SEHProcessExceptionReturnAddress = NULL;
+void* g_InvokeActivationHandlerReturnAddress = NULL;
 
 /* Internal function definitions **********************************************/
 
diff --git a/src/coreclr/pal/src/exception/signal.cpp b/src/coreclr/pal/src/exception/signal.cpp
index 7848e562509..a5b94db1253 100644
--- a/src/coreclr/pal/src/exception/signal.cpp
+++ b/src/coreclr/pal/src/exception/signal.cpp
@@ -71,6 +71,7 @@ typedef void (*SIGFUNC)(int, siginfo_t *, void *);
 static void sigterm_handler(int code, siginfo_t *siginfo, void *context);
 #ifdef INJECT_ACTIVATION_SIGNAL
 static void inject_activation_handler(int code, siginfo_t *siginfo, void *context);
+extern void* g_InvokeActivationHandlerReturnAddress;
 #endif
 
 static void sigill_handler(int code, siginfo_t *siginfo, void *context);
diff --git a/src/coreclr/pal/src/include/pal/context.h b/src/coreclr/pal/src/include/pal/context.h
index 281c418aef4..1b46e57cf6e 100644
--- a/src/coreclr/pal/src/include/pal/context.h
+++ b/src/coreclr/pal/src/include/pal/context.h
@@ -291,7 +291,57 @@ inline void *FPREG_Xstate_Ymmh(const ucontext_t *uc)
 
 #if defined(HOST_ARM64)
 
-#ifndef TARGET_OSX
+#if defined(TARGET_FREEBSD)
+
+#define MCREG_X0(mc)  (mc.mc_gpregs.gp_x[0])
+#define MCREG_X1(mc)  (mc.mc_gpregs.gp_x[1])
+#define MCREG_X2(mc)  (mc.mc_gpregs.gp_x[2])
+#define MCREG_X3(mc)  (mc.mc_gpregs.gp_x[3])
+#define MCREG_X4(mc)  (mc.mc_gpregs.gp_x[4])
+#define MCREG_X5(mc)  (mc.mc_gpregs.gp_x[5])
+#define MCREG_X6(mc)  (mc.mc_gpregs.gp_x[6])
+#define MCREG_X7(mc)  (mc.mc_gpregs.gp_x[7])
+#define MCREG_X8(mc)  (mc.mc_gpregs.gp_x[8])
+#define MCREG_X9(mc)  (mc.mc_gpregs.gp_x[9])
+#define MCREG_X10(mc) (mc.mc_gpregs.gp_x[10])
+#define MCREG_X11(mc) (mc.mc_gpregs.gp_x[11])
+#define MCREG_X12(mc) (mc.mc_gpregs.gp_x[12])
+#define MCREG_X13(mc) (mc.mc_gpregs.gp_x[13])
+#define MCREG_X14(mc) (mc.mc_gpregs.gp_x[14])
+#define MCREG_X15(mc) (mc.mc_gpregs.gp_x[15])
+#define MCREG_X16(mc) (mc.mc_gpregs.gp_x[16])
+#define MCREG_X17(mc) (mc.mc_gpregs.gp_x[17])
+#define MCREG_X18(mc) (mc.mc_gpregs.gp_x[18])
+#define MCREG_X19(mc) (mc.mc_gpregs.gp_x[19])
+#define MCREG_X20(mc) (mc.mc_gpregs.gp_x[20])
+#define MCREG_X21(mc) (mc.mc_gpregs.gp_x[21])
+#define MCREG_X22(mc) (mc.mc_gpregs.gp_x[22])
+#define MCREG_X23(mc) (mc.mc_gpregs.gp_x[23])
+#define MCREG_X24(mc) (mc.mc_gpregs.gp_x[24])
+#define MCREG_X25(mc) (mc.mc_gpregs.gp_x[25])
+#define MCREG_X26(mc) (mc.mc_gpregs.gp_x[26])
+#define MCREG_X27(mc) (mc.mc_gpregs.gp_x[27])
+#define MCREG_X28(mc) (mc.mc_gpregs.gp_x[28])
+
+#define MCREG_Cpsr(mc) (mc.mc_gpregs.gp_spsr)
+#define MCREG_Lr(mc)   (mc.mc_gpregs.gp_lr)
+#define MCREG_Sp(mc)   (mc.mc_gpregs.gp_sp)
+#define MCREG_Pc(mc)   (mc.mc_gpregs.gp_elr)
+#define MCREG_Fp(mc)   (mc.mc_gpregs.gp_x[29])
+
+inline
+struct fpregs* GetNativeSigSimdContext(native_context_t *mc)
+{
+    return &(mc->uc_mcontext.mc_fpregs);
+}
+
+inline
+const struct fpregs* GetConstNativeSigSimdContext(const native_context_t *mc)
+{
+    return GetNativeSigSimdContext(const_cast<native_context_t*>(mc));
+}
+
+#elif !defined(TARGET_OSX) // TARGET_FREEBSD
 
 #define MCREG_X0(mc)      ((mc).regs[0])
 #define MCREG_X1(mc)      ((mc).regs[1])
@@ -683,6 +733,8 @@ const VfpSigFrame* GetConstNativeSigSimdContext(const native_context_t *mc)
 
 #ifdef HOST_64BIT
 
+#ifdef HOST_AMD64
+
 #define BSDREG_Rbx(reg)     BSD_REGS_STYLE(reg,RBX,rbx)
 #define BSDREG_Rcx(reg)     BSD_REGS_STYLE(reg,RCX,rcx)
 #define BSDREG_Rdx(reg)     BSD_REGS_STYLE(reg,RDX,rdx)
@@ -704,6 +756,45 @@ const VfpSigFrame* GetConstNativeSigSimdContext(const native_context_t *mc)
 #define BSDREG_R15(reg)     BSD_REGS_STYLE(reg,R15,r15)
 #define BSDREG_EFlags(reg)  BSD_REGS_STYLE(reg,RFLAGS,rflags)
 
+#elif defined(HOST_ARM64)
+
+#define BSDREG_X0(reg) BSD_REGS_STYLE(reg,X[0],x[0])
+#define BSDREG_X1(reg) BSD_REGS_STYLE(reg,X[1],x[1])
+#define BSDREG_X2(reg) BSD_REGS_STYLE(reg,X[2],x[2])
+#define BSDREG_X3(reg) BSD_REGS_STYLE(reg,X[3],x[3])
+#define BSDREG_X4(reg) BSD_REGS_STYLE(reg,X[4],x[4])
+#define BSDREG_X5(reg) BSD_REGS_STYLE(reg,X[5],x[5])
+#define BSDREG_X6(reg) BSD_REGS_STYLE(reg,X[6],x[6])
+#define BSDREG_X7(reg) BSD_REGS_STYLE(reg,X[7],x[7])
+#define BSDREG_X8(reg) BSD_REGS_STYLE(reg,X[8],x[8])
+#define BSDREG_X9(reg) BSD_REGS_STYLE(reg,X[9],x[9])
+#define BSDREG_X10(reg) BSD_REGS_STYLE(reg,X[10],x[10])
+#define BSDREG_X11(reg) BSD_REGS_STYLE(reg,X[11],x[11])
+#define BSDREG_X12(reg) BSD_REGS_STYLE(reg,X[12],x[12])
+#define BSDREG_X13(reg) BSD_REGS_STYLE(reg,X[13],x[13])
+#define BSDREG_X14(reg) BSD_REGS_STYLE(reg,X[14],x[14])
+#define BSDREG_X15(reg) BSD_REGS_STYLE(reg,X[15],x[15])
+#define BSDREG_X16(reg) BSD_REGS_STYLE(reg,X[16],x[16])
+#define BSDREG_X17(reg) BSD_REGS_STYLE(reg,X[17],x[17])
+#define BSDREG_X18(reg) BSD_REGS_STYLE(reg,X[18],x[18])
+#define BSDREG_X19(reg) BSD_REGS_STYLE(reg,X[19],x[19])
+#define BSDREG_X20(reg) BSD_REGS_STYLE(reg,X[20],x[20])
+#define BSDREG_X21(reg) BSD_REGS_STYLE(reg,X[21],x[21])
+#define BSDREG_X22(reg) BSD_REGS_STYLE(reg,X[22],x[22])
+#define BSDREG_X23(reg) BSD_REGS_STYLE(reg,X[23],x[23])
+#define BSDREG_X24(reg) BSD_REGS_STYLE(reg,X[24],x[24])
+#define BSDREG_X25(reg) BSD_REGS_STYLE(reg,X[25],x[25])
+#define BSDREG_X26(reg) BSD_REGS_STYLE(reg,X[26],x[26])
+#define BSDREG_X27(reg) BSD_REGS_STYLE(reg,X[27],x[27])
+#define BSDREG_X28(reg) BSD_REGS_STYLE(reg,X[28],x[28])
+#define BSDREG_Pc(reg) BSD_REGS_STYLE(reg,Elr,elr)
+#define BSDREG_Fp(reg) BSD_REGS_STYLE(reg,X[29],x[29])
+#define BSDREG_Sp(reg) BSD_REGS_STYLE(reg,Sp,sp)
+#define BSDREG_Lr(reg) BSD_REGS_STYLE(reg,Lr,lr)
+#define BSDREG_Cpsr(reg) BSD_REGS_STYLE(reg,Spsr,spsr)
+
+#endif // HOST_ARM64
+
 #else // HOST_64BIT
 
 #define BSDREG_Ebx(reg)     BSD_REGS_STYLE(reg,EBX,ebx)
diff --git a/src/coreclr/pal/src/thread/context.cpp b/src/coreclr/pal/src/thread/context.cpp
index 8d630fa170f..e483d68b811 100644
--- a/src/coreclr/pal/src/thread/context.cpp
+++ b/src/coreclr/pal/src/thread/context.cpp
@@ -513,6 +513,17 @@ void CONTEXTToNativeContext(CONST CONTEXT *lpContext, native_context_t *native)
         {
             *(NEON128*) &fp->__v[i] = lpContext->V[i];
         }
+#elif defined(TARGET_FREEBSD)
+        struct fpregs* fp = GetNativeSigSimdContext(native);
+        if (fp)
+        {
+            fp->fp_sr = lpContext->Fpsr;
+            fp->fp_cr = lpContext->Fpcr;
+            for (int i = 0; i < 32; i++)
+            {
+                *(NEON128*) &fp->fp_q[i] = lpContext->V[i];
+            }
+        }
 #else // TARGET_OSX
         fpsimd_context* fp = GetNativeSigSimdContext(native);
         if (fp)
@@ -652,6 +663,17 @@ void CONTEXTFromNativeContext(const native_context_t *native, LPCONTEXT lpContex
         {
             lpContext->V[i] = *(NEON128*) &fp->__v[i];
         }
+#elif defined(TARGET_FREEBSD)
+        const struct fpregs* fp = GetConstNativeSigSimdContext(native);
+        if (fp)
+        {
+            lpContext->Fpsr = fp->fp_sr;
+            lpContext->Fpcr = fp->fp_cr;
+            for (int i = 0; i < 32; i++)
+            {
+                lpContext->V[i] = *(NEON128*) &fp->fp_q[i];
+            }
+        }
 #else // TARGET_OSX
         const fpsimd_context* fp = GetConstNativeSigSimdContext(native);
         if (fp)
diff --git a/src/coreclr/pal/tools/gen-dactable-rva.sh b/src/coreclr/pal/tools/gen-dactable-rva.sh
index 0f3ce0a0866..4f2828b2f40 100755
--- a/src/coreclr/pal/tools/gen-dactable-rva.sh
+++ b/src/coreclr/pal/tools/gen-dactable-rva.sh
@@ -10,12 +10,11 @@ fi
 while read -r line; do
   if [[ "$line" =~ g_dacTable ]]; then
 
-    # Parse line for DAC relative address, if length of value is:
-    # * shorter than 16, zero pad.
-    # * longer than 16, capture last 16 characters.
+    # Parse line for DAC relative address. If length of value is longer than 16,
+    # capture the last 16 characters.
     #
     array=($line)
-    value="$(printf "%016s\n" ${array[2]:(${#array[2]} > 16 ? -16 : 0)})"
+    value="$(printf "%s\n" ${array[2]:(${#array[2]} > 16 ? -16 : 0)})"
 
     # Write line to file and exit
     printf "#define DAC_TABLE_RVA 0x%s\n" "$value" > "$2"
diff --git a/src/coreclr/tools/aot/crossgen2/Program.cs b/src/coreclr/tools/aot/crossgen2/Program.cs
index e9eb59289f8..1830a7598dc 100644
--- a/src/coreclr/tools/aot/crossgen2/Program.cs
+++ b/src/coreclr/tools/aot/crossgen2/Program.cs
@@ -54,6 +54,8 @@ public static void ComputeDefaultOptions(out TargetOS os, out TargetArchitecture
                 os = TargetOS.Linux;
             else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))
                 os = TargetOS.OSX;
+            else if (RuntimeInformation.IsOSPlatform(OSPlatform.FreeBSD))
+                os = TargetOS.FreeBSD;
             else
                 throw new NotImplementedException();
 
@@ -210,6 +212,8 @@ private void ConfigureTarget()
                     _targetOS = TargetOS.Linux;
                 else if (_commandLineOptions.TargetOS.Equals("osx", StringComparison.OrdinalIgnoreCase))
                     _targetOS = TargetOS.OSX;
+                else if (_commandLineOptions.TargetOS.Equals("freebsd", StringComparison.OrdinalIgnoreCase))
+                    _targetOS = TargetOS.FreeBSD;
                 else
                     throw new CommandLineException(SR.TargetOSUnsupported);
             }
diff --git a/src/installer/pkg/projects/netcoreappRIDs.props b/src/installer/pkg/projects/netcoreappRIDs.props
index 37fa250ded6..c0b3f990332 100644
--- a/src/installer/pkg/projects/netcoreappRIDs.props
+++ b/src/installer/pkg/projects/netcoreappRIDs.props
@@ -9,7 +9,6 @@
       <Platform>arm64</Platform>
     </OfficialBuildRID>
     <!-- Not currently built by CoreFX. -->
-    <!-- <OfficialBuildRID Include="freebsd-x64" /> -->
     <!-- <OfficialBuildRID Include="netbsd-x64" /> -->
     <!-- <OfficialBuildRID Include="illumos-x64" /> -->
     <!-- <OfficialBuildRID Include="solaris-x64" /> -->
@@ -40,6 +39,7 @@
          built during official builds, however we wish to include them
          in our runtime.json to enable others to provide them.  -->
     <UnofficialBuildRID Include="freebsd-x64" />
+    <UnofficialBuildRID Include="freebsd-arm64" />
     <UnofficialBuildRID Include="tizen.4.0.0-armel">
       <Platform>armel</Platform>
     </UnofficialBuildRID>
diff --git a/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj b/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj
index 4c3c0f82a1a..71e26c65b59 100644
--- a/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj
+++ b/src/installer/pkg/sfx/Microsoft.NETCore.App/Microsoft.NETCore.App.Crossgen2.sfxproj
@@ -11,7 +11,7 @@
     <ArchiveName>dotnet-crossgen2</ArchiveName>
     <SharedFrameworkHostFileNameOverride>crossgen2</SharedFrameworkHostFileNameOverride>
     <!-- Build this pack for any RID if building from source. Otherwise, only build select RIDs. -->
-    <RuntimeIdentifiers Condition="'$(DotNetBuildFromSource)' != 'true'">linux-x64;linux-musl-x64;linux-arm;linux-musl-arm;linux-arm64;linux-musl-arm64;osx-x64;osx-arm64;win-x64;win-x86;win-arm64;win-arm</RuntimeIdentifiers>
+    <RuntimeIdentifiers Condition="'$(DotNetBuildFromSource)' != 'true'">linux-x64;linux-musl-x64;linux-arm;linux-musl-arm;linux-arm64;linux-musl-arm64;freebsd-x64;freebsd-arm64;osx-x64;osx-arm64;win-x64;win-x86;win-arm64;win-arm</RuntimeIdentifiers>
     <GenerateInstallers>false</GenerateInstallers>
     <GetSharedFrameworkFilesForReadyToRunDependsOn>
         AddRuntimeFilesToPackage;
diff --git a/src/installer/pkg/sfx/Microsoft.NETCore.App/ReadyToRun.targets b/src/installer/pkg/sfx/Microsoft.NETCore.App/ReadyToRun.targets
index 4e3f684dedc..0175f7d4c6d 100644
--- a/src/installer/pkg/sfx/Microsoft.NETCore.App/ReadyToRun.targets
+++ b/src/installer/pkg/sfx/Microsoft.NETCore.App/ReadyToRun.targets
@@ -6,6 +6,7 @@
 
     <ItemGroup>
       <PublishReadyToRunCrossgen2ExtraArgsList Include="--targetarch:$(TargetArchitecture)"/>
+      <PublishReadyToRunCrossgen2ExtraArgsList Include="--targetos:$(TargetOS)"/>
 
       <!-- Only use mibc files if UsingToolIbcOptimization is false. Allows enabling/disabling using ibc instead of mibc data -->
       <PublishReadyToRunCrossgen2ExtraArgsList Condition="'$(UsingToolIbcOptimization)' != 'true' and '$(EnableNgenOptimization)' == 'true'" Include="@(OptimizationMibcFiles->'-m:%(Identity)')"/>
diff --git a/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.GetProcInfo.cs b/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.GetProcInfo.cs
index bc1920c0156..09f7c97d302 100644
--- a/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.GetProcInfo.cs
+++ b/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.GetProcInfo.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Diagnostics;
 using System.Runtime.InteropServices;
 
 #pragma warning disable CA1823 // analyzer incorrectly flags fixed buffer length const (https://github.com/dotnet/roslyn/issues/37593)
@@ -186,11 +187,6 @@ public unsafe struct kinfo_proc
         public static unsafe kinfo_proc* GetProcInfo(int pid, bool threads, out int count)
         {
             Span<int> sysctlName = stackalloc int[4];
-            int bytesLength = 0;
-            byte* pBuffer = null;
-            kinfo_proc* kinfo = null;
-
-            count = -1;
 
             if (pid == 0)
             {
@@ -207,23 +203,17 @@ public unsafe struct kinfo_proc
             sysctlName[1] = KERN_PROC;
             sysctlName[0] = CTL_KERN;
 
-            try
-            {
-                Interop.Sys.Sysctl(sysctlName, ref pBuffer, ref bytesLength);
-                kinfo = (kinfo_proc*)pBuffer;
-                if (kinfo->ki_structsize != sizeof(kinfo_proc))
-                {
-                    // failed consistency check
-                    throw new ArgumentOutOfRangeException(nameof(pid));
-                }
-
-                count = (int)bytesLength / sizeof(kinfo_proc);
-            }
-            finally
-            {
-                Marshal.FreeHGlobal((IntPtr)pBuffer);
-            }
+            byte* pBuffer = null;
+            int bytesLength = 0;
+            Interop.Sys.Sysctl(sysctlName, ref pBuffer, ref bytesLength);
+
+            kinfo_proc* kinfo = (kinfo_proc*)pBuffer;
+
+            Debug.Assert(kinfo->ki_structsize == sizeof(kinfo_proc));
+
+            count = (int)bytesLength / sizeof(kinfo_proc);
 
+            // Buffer ownership transferred to the caller
             return kinfo;
         }
     }
diff --git a/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.cs b/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.cs
index 031f56a50f0..3d18ead32d1 100644
--- a/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.cs
+++ b/src/libraries/Common/src/Interop/FreeBSD/Interop.Process.cs
@@ -65,7 +65,7 @@ internal static unsafe int[] ListAllPids()
             }
             finally
             {
-                Marshal.FreeHGlobal((IntPtr)entries);
+                NativeMemory.Free(entries);
             }
         }
 
@@ -87,7 +87,7 @@ internal static unsafe int[] ListAllPids()
             }
             finally
             {
-                Marshal.FreeHGlobal((IntPtr)pBuffer);
+                NativeMemory.Free(pBuffer);
             }
         }
 
@@ -107,9 +107,9 @@ public static unsafe ProcessInfo GetProcessInfoById(int pid)
                 throw new ArgumentOutOfRangeException(nameof(pid));
             }
 
-            kinfo_proc* kinfo = GetProcInfo(pid, true, out int count);
             ProcessInfo info;
 
+            kinfo_proc* kinfo = GetProcInfo(pid, true, out int count);
             try
             {
                 if (count < 1)
@@ -142,7 +142,7 @@ public static unsafe ProcessInfo GetProcessInfoById(int pid)
             }
             finally
             {
-                Marshal.FreeHGlobal((IntPtr)kinfo);
+                NativeMemory.Free(kinfo);
             }
 
             return info;
@@ -160,12 +160,11 @@ public static unsafe ProcessInfo GetProcessInfoById(int pid)
         public static unsafe proc_stats GetThreadInfo(int pid, int tid)
         {
             proc_stats ret = default;
-            kinfo_proc* info = null;
             int count;
 
+            kinfo_proc* info = GetProcInfo(pid, (tid != 0), out count);
             try
             {
-                info = GetProcInfo(pid, (tid != 0), out count);
                 if (info != null && count >= 1)
                 {
                     if (tid == 0)
@@ -194,7 +193,7 @@ public static unsafe proc_stats GetThreadInfo(int pid, int tid)
             }
             finally
             {
-                Marshal.FreeHGlobal((IntPtr)info);
+                NativeMemory.Free(info);
             }
 
             return ret;
diff --git a/src/libraries/Microsoft.NETCore.Platforms/src/runtime.compatibility.json b/src/libraries/Microsoft.NETCore.Platforms/src/runtime.compatibility.json
index f4aebcb7147..8235a434381 100644
--- a/src/libraries/Microsoft.NETCore.Platforms/src/runtime.compatibility.json
+++ b/src/libraries/Microsoft.NETCore.Platforms/src/runtime.compatibility.json
@@ -3213,6 +3213,14 @@
     "any",
     "base"
   ],
+  "freebsd-arm64": [
+    "freebsd-arm64",
+    "freebsd",
+    "unix-arm64",
+    "unix",
+    "any",
+    "base"
+  ],
   "freebsd.12": [
     "freebsd.12",
     "freebsd.11",
@@ -3233,6 +3241,16 @@
     "any",
     "base"
   ],
+  "freebsd.12-arm64": [
+    "freebsd.12-arm64",
+    "freebsd.12",
+    "freebsd-arm64",
+    "freebsd",
+    "unix-arm64",
+    "unix",
+    "any",
+    "base"
+  ],
   "freebsd.13": [
     "freebsd.13",
     "freebsd.12",
@@ -3256,6 +3274,18 @@
     "any",
     "base"
   ],
+  "freebsd.13-arm64": [
+    "freebsd.13-arm64",
+    "freebsd.13",
+    "freebsd.12-arm64",
+    "freebsd.12",
+    "freebsd-arm64",
+    "freebsd",
+    "unix-arm64",
+    "unix",
+    "any",
+    "base"
+  ],
   "gentoo": [
     "gentoo",
     "linux",
diff --git a/src/libraries/Microsoft.NETCore.Platforms/src/runtime.json b/src/libraries/Microsoft.NETCore.Platforms/src/runtime.json
index fb2ea2da7c0..130cdcb5ea0 100644
--- a/src/libraries/Microsoft.NETCore.Platforms/src/runtime.json
+++ b/src/libraries/Microsoft.NETCore.Platforms/src/runtime.json
@@ -1208,6 +1208,12 @@
         "freebsd-x64"
       ]
     },
+    "freebsd-arm64": {
+      "#import": [
+        "freebsd",
+        "unix-arm64"
+      ]
+    },
     "freebsd.12": {
       "#import": [
         "freebsd.11"
@@ -1219,6 +1225,12 @@
         "freebsd.11-x64"
       ]
     },
+    "freebsd.12-arm64": {
+      "#import": [
+        "freebsd.12",
+        "freebsd-arm64"
+      ]
+    },
     "freebsd.13": {
       "#import": [
         "freebsd.12"
@@ -1230,6 +1242,12 @@
         "freebsd.12-x64"
       ]
     },
+    "freebsd.13-arm64": {
+      "#import": [
+        "freebsd.13",
+        "freebsd.12-arm64"
+      ]
+    },
     "gentoo": {
       "#import": [
         "linux"
diff --git a/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props b/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props
index 479e1397e7a..9053693040e 100644
--- a/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props
+++ b/src/libraries/Microsoft.NETCore.Platforms/src/runtimeGroups.props
@@ -160,7 +160,7 @@
 
     <RuntimeGroup Include="freebsd">
       <Parent>unix</Parent>
-      <Architectures>x64</Architectures>
+      <Architectures>x64;arm64</Architectures>
       <Versions>11;12;13</Versions>
     </RuntimeGroup>
 
diff --git a/src/libraries/Native/Unix/System.Native/extra_libs.cmake b/src/libraries/Native/Unix/System.Native/extra_libs.cmake
index 74efbf803ae..2edc74bde7a 100644
--- a/src/libraries/Native/Unix/System.Native/extra_libs.cmake
+++ b/src/libraries/Native/Unix/System.Native/extra_libs.cmake
@@ -4,7 +4,7 @@ macro(append_extra_system_libs NativeLibsExtra)
         list(APPEND ${NativeLibsExtra} rt)
     elseif (CLR_CMAKE_TARGET_FREEBSD)
         list(APPEND ${NativeLibsExtra} pthread)
-        find_library(INOTIFY_LIBRARY inotify HINTS /usr/local/lib)
+        find_library(INOTIFY_LIBRARY inotify HINTS ${CROSS_ROOTFS}/usr/local/lib)
         list(APPEND ${NativeLibsExtra} ${INOTIFY_LIBRARY})
     elseif (CLR_CMAKE_TARGET_SUNOS)
         list(APPEND ${NativeLibsExtra} socket)
diff --git a/src/libraries/Native/Unix/configure.cmake b/src/libraries/Native/Unix/configure.cmake
index e00b35d0f9e..4302123ee33 100644
--- a/src/libraries/Native/Unix/configure.cmake
+++ b/src/libraries/Native/Unix/configure.cmake
@@ -997,7 +997,7 @@ set (CMAKE_REQUIRED_FLAGS ${PREVIOUS_CMAKE_REQUIRED_FLAGS})
 
 set (PREVIOUS_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})
 if (HAVE_SYS_INOTIFY_H AND CLR_CMAKE_TARGET_FREEBSD)
-    set (CMAKE_REQUIRED_LIBRARIES "-linotify -L/usr/local/lib")
+    set (CMAKE_REQUIRED_LIBRARIES "-linotify -L${CROSS_ROOTFS}/usr/local/lib")
 endif()
 
 check_symbol_exists(
diff --git a/src/libraries/System.Private.CoreLib/src/System/Environment.FreeBSD.cs b/src/libraries/System.Private.CoreLib/src/System/Environment.FreeBSD.cs
index e9e9178510e..aa568ef7822 100644
--- a/src/libraries/System.Private.CoreLib/src/System/Environment.FreeBSD.cs
+++ b/src/libraries/System.Private.CoreLib/src/System/Environment.FreeBSD.cs
@@ -7,6 +7,20 @@ namespace System
 {
     public static partial class Environment
     {
-        public static unsafe long WorkingSet => Interop.Process.GetProcInfo(ProcessId, true, out _)->ki_rssize;
+        public static unsafe long WorkingSet
+        {
+            get
+            {
+                Interop.Process.kinfo_proc* processInfo = Interop.Process.GetProcInfo(ProcessId, true, out _);
+                try
+                {
+                    return processInfo->ki_rssize;
+                }
+                finally
+                {
+                    NativeMemory.Free(processInfo);
+                }
+            }
+        }
     }
 }
diff --git a/src/mono/CMakeLists.txt b/src/mono/CMakeLists.txt
index 49a73b1b709..4192468b8c5 100644
--- a/src/mono/CMakeLists.txt
+++ b/src/mono/CMakeLists.txt
@@ -263,6 +263,8 @@ elseif(CMAKE_SYSTEM_NAME STREQUAL "Windows")
 elseif(CMAKE_SYSTEM_NAME STREQUAL "SunOS")
   set(HOST_SOLARIS 1)
   add_definitions(-DGC_SOLARIS_THREADS -DGC_SOLARIS_PTHREADS -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS -DUSE_MMAP -DUSE_MUNMAP -DHOST_SOLARIS -D__EXTENSIONS__ -D_XPG4_2)
+elseif(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
+  set(HOST_FREEBSD 1)
 else()
   message(FATAL_ERROR "Host '${CMAKE_SYSTEM_NAME}' not supported.")
 endif()
@@ -303,6 +305,8 @@ elseif(TARGET_SYSTEM_NAME STREQUAL "Windows")
   set(TARGET_WIN32 1)
 elseif(TARGET_SYSTEM_NAME STREQUAL "SunOS")
   set(TARGET_SOLARIS 1)
+elseif(TARGET_SYSTEM_NAME STREQUAL "FreeBSD")
+  set(TARGET_FREEBSD 1)
 else()
   message(FATAL_ERROR "Target '${TARGET_SYSTEM_NAME}' not supported.")
 endif()
@@ -331,7 +335,7 @@ elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "i686" OR CMAKE_SYSTEM_PROCESSOR STREQUAL
   set(CMAKE_SYSTEM_PROCESSOR "x86")
 elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "ARM64")
   set(CMAKE_SYSTEM_PROCESSOR "arm64")
-elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "x64")
+elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "amd64" OR CMAKE_SYSTEM_PROCESSOR STREQUAL "x64")
   set(CMAKE_SYSTEM_PROCESSOR "x86_64")
 endif()
 
@@ -605,6 +609,12 @@ elseif(HOST_WIN32)
 elseif(HOST_SOLARIS)
   set(ICU_FLAGS "-DPALEXPORT=\"\" -DTARGET_UNIX -Wno-reserved-id-macro -Wno-documentation -Wno-documentation-unknown-command -Wno-switch-enum -Wno-covered-switch-default -Wno-extra-semi-stmt -Wno-unknown-warning-option")
   set(HAVE_SYS_ICU 1)
+elseif(TARGET_FREEBSD)
+  set(ICU_FLAGS "-DTARGET_UNIX -Wno-deprecated-declarations")
+  set(HAVE_SYS_ICU 1)
+  set(ICU_LIBS icuuc icui18n)
+  set(ICU_INCLUDEDIR "${CROSS_ROOTFS}/usr/local/include")
+  set(ICU_LIBDIR "${CROSS_ROOTFS}/usr/local/lib")
 else()
   message(FATAL_ERROR "Unknown host")
 endif()
diff --git a/src/mono/cmake/configure.cmake b/src/mono/cmake/configure.cmake
index d27fc520120..7a560b4a530 100644
--- a/src/mono/cmake/configure.cmake
+++ b/src/mono/cmake/configure.cmake
@@ -191,3 +191,9 @@ if(HOST_SOLARIS)
   set(HAVE_NETINET_TCP_H 1)
   set(HAVE_GETADDRINFO 1)
 endif()
+
+if(CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
+  # FreeBSD fails earlier ac_check_headers for these because <sys/types.h> is needed.
+  set(HAVE_SYS_SYSCTL_H 1)
+  set(HAVE_SYS_USER_H 1)
+endif()
diff --git a/src/mono/cmake/eglib-config.h.cmake.in b/src/mono/cmake/eglib-config.h.cmake.in
index 9f1394e134b..ac061852d61 100644
--- a/src/mono/cmake/eglib-config.h.cmake.in
+++ b/src/mono/cmake/eglib-config.h.cmake.in
@@ -33,7 +33,7 @@
 
 #else
 
-#if @HAVE_ALLOCA_H@ == 1
+#ifdef HAVE_ALLOCA_H
 #define G_HAVE_ALLOCA_H
 #endif
 
diff --git a/src/mono/mono.proj b/src/mono/mono.proj
index fb98ffc1896..03d85a198b8 100644
--- a/src/mono/mono.proj
+++ b/src/mono/mono.proj
@@ -245,6 +245,19 @@
       <_MonoBuildEnv Include="PKG_CONFIG_PATH=$(MonoCrossDir)/usr/lib/s390x-linux-gnu/pkgconfig" />
     </ItemGroup>
 
+    <!-- x64 FreeBSD cross build options -->
+    <ItemGroup Condition="'$(TargetsFreeBSD)' == 'true' and '$(MonoCrossDir)' != '' and '$(TargetArchitecture)' == 'x64'">
+      <_MonoCMakeArgs Include="-DCMAKE_TOOLCHAIN_FILE=$([MSBuild]::NormalizePath('$(RepositoryEngineeringDir)', 'common', 'cross', 'toolchain.cmake'))" />
+      <_MonoBuildEnv Include="TARGET_BUILD_ARCH=x64" />
+    </ItemGroup>
+
+    <!-- ARM64 FreeBSD cross build options -->
+    <ItemGroup Condition="'$(TargetsFreeBSD)' == 'true' and '$(MonoCrossDir)' != '' and '$(TargetArchitecture)' == 'arm64'">
+      <_MonoCMakeArgs Include="-DCMAKE_TOOLCHAIN_FILE=$(CrossToolchainFile)" />
+      <_MonoBuildEnv Include="TARGET_BUILD_ARCH=arm64" />
+      <_MonoBuildEnv Include="PKG_CONFIG_PATH=$(MonoCrossDir)usr/local/libdata/pkgconfig" />
+    </ItemGroup>
+
     <!-- Windows specific options -->
     <ItemGroup Condition="'$(TargetsWindows)' == 'true'">
       <_MonoCPPFLAGS Include="-DWIN32" />
diff --git a/src/mono/mono/mini/CMakeLists.txt b/src/mono/mono/mini/CMakeLists.txt
index 128ed08f45b..1a2b19d3588 100644
--- a/src/mono/mono/mini/CMakeLists.txt
+++ b/src/mono/mono/mini/CMakeLists.txt
@@ -35,6 +35,8 @@ elseif(HOST_WIN32)
 set(OS_LIBS bcrypt.lib Mswsock.lib ws2_32.lib psapi.lib version.lib advapi32.lib winmm.lib kernel32.lib)
 elseif(HOST_SOLARIS)
   set(OS_LIBS socket pthread m ${CMAKE_DL_LIBS})
+elseif(HOST_FREEBSD)
+  set(OS_LIBS pthread m)
 endif()
 
 #
@@ -263,7 +265,7 @@ set(posix_sources
 
 if(HOST_DARWIN)
 set(os_sources "${darwin_sources};${posix_sources}")
-elseif(HOST_LINUX OR HOST_SOLARIS)
+elseif(HOST_LINUX OR HOST_SOLARIS OR HOST_FREEBSD)
 set(os_sources "${posix_sources}")
 elseif(HOST_WIN32)
 set(os_sources "${windows_sources}")
diff --git a/src/tests/Common/CLRTest.CrossGen.targets b/src/tests/Common/CLRTest.CrossGen.targets
index 4d3e8ea07d3..260fa688593 100644
--- a/src/tests/Common/CLRTest.CrossGen.targets
+++ b/src/tests/Common/CLRTest.CrossGen.targets
@@ -101,6 +101,7 @@ if [ ! -z ${RunCrossGen2+x} ]%3B then
         echo -r:$CORE_ROOT/mscorlib.dll>>$__ResponseFile
         echo --verify-type-and-field-layout>>$__ResponseFile
         echo --targetarch:$(TargetArchitecture)>>$__ResponseFile
+        echo --targetos:$(TargetOS)>>$__ResponseFile
         echo -O>>$__ResponseFile
 
         echo "Response file: $__ResponseFile"
@@ -224,6 +225,7 @@ if defined RunCrossGen2 (
     echo !__InputFile!>>!__ResponseFile!
     echo -o:!__OutputFile!>>!__ResponseFile!
     echo --targetarch:$(TargetArchitecture)>>!__ResponseFile!
+    echo --targetos:$(TargetOS)>>!__ResponseFile!
     echo --verify-type-and-field-layout>>!__ResponseFile!
     echo --method-layout:random>>!__ResponseFile!
     echo -r:!CORE_ROOT!\System.*.dll>>!__ResponseFile!
diff --git a/src/tests/readytorun/multifolder/multifolder.csproj b/src/tests/readytorun/multifolder/multifolder.csproj
index 7011612ab6d..649f0a982cb 100644
--- a/src/tests/readytorun/multifolder/multifolder.csproj
+++ b/src/tests/readytorun/multifolder/multifolder.csproj
@@ -37,6 +37,7 @@ $(CLRTestBatchPreCommands)
     echo -o:%scriptPath%\multifolder-composite.dll>>%__ResponseFile%
     echo --crp:%scriptPath%\..>>%__ResponseFile%
     echo --targetarch:$(TargetArchitecture)>>%__ResponseFile%
+    echo --targetos:$(TargetOS)>>%__ResponseFile%
     echo %scriptPath%\multifolder.dll>>%__ResponseFile%
     echo %scriptPath%\..\FolderA\FolderA\FolderA.dll>>%__ResponseFile%
     echo %scriptPath%\..\FolderB\FolderB\FolderB.dll>>%__ResponseFile%
@@ -83,6 +84,7 @@ $(BashCLRTestPreCommands)
     echo -o:$__OutputDir/multifolder-composite.dll>>$__ResponseFile
     echo --crp:$__OutputDir/..>>$__ResponseFile
     echo --targetarch:$(TargetArchitecture)>>$__ResponseFile
+    echo --targetos:$(TargetOS)>>$__ResponseFile
     echo $__OutputDir/multifolder.dll>>$__ResponseFile
     echo $__OutputDir/../FolderA/FolderA/FolderA.dll>>$__ResponseFile
     echo $__OutputDir/../FolderB/FolderB/FolderB.dll>>$__ResponseFile
